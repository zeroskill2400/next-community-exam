# CI/CD Pipeline - 테스트 실행 후 Vercel 배포
name: Test and Deploy

# 워크플로우 실행 조건
on:
  push:
    branches: [ main ]      # main 브랜치에 push할 때
  pull_request:
    branches: [ main ]      # main 브랜치로 PR 생성할 때

jobs:
  # 테스트 작업
  test:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행
    
    steps:
      # 레포지토리 코드를 작업 환경으로 가져오기
      - uses: actions/checkout@v3

      # Node.js 환경 설정 (버전 20 사용)
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'      # npm 캐시로 설치 속도 향상

      # package-lock.json 기반으로 정확한 패키지 버전 설치
      - run: npm ci

      # Jest 테스트를 CI 모드로 실행 (coverage 포함)
      - run: npm run test:ci

  # Vercel 배포 작업
  deploy:
    needs: test             # test 작업이 성공해야만 실행
    runs-on: ubuntu-latest
    # main 브랜치에 직접 push했을 때만 배포 (PR은 제외)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      # 코드 가져오기
      - uses: actions/checkout@v3
      
      # Vercel CLI 전역 설치
      - run: npm install --global vercel@latest
      
      # Vercel 프로젝트 환경 정보 가져오기
      - run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      # 프로덕션용 빌드 생성
      - run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      # 빌드된 결과물을 Vercel에 배포
      - run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}